// <auto-generated />
using System;
using Codino_UserCredential.Repository.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Codino_UserCredential.Repository.Migrations
{
    [DbContext(typeof(CodinoDbContext))]
    partial class CodinoDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("user")
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Codino_UserCredential.Repository.Models.Content.Biome", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("BackgroundImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("CreaUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<int?>("WorldMap")
                        .HasColumnType("integer")
                        .HasColumnName("WorldMap");

                    b.Property<int>("WorldMapId")
                        .HasColumnType("integer")
                        .HasColumnName("WorldMapid");

                    b.Property<DateTime>("creaDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("id");

                    b.HasIndex("WorldMapId");

                    b.ToTable("Biome", "content");
                });

            modelBuilder.Entity("Codino_UserCredential.Repository.Models.Content.ProgrammingTask", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("CreaUserId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("ExpectedPattern")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("ModifDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("ToyId")
                        .HasColumnType("integer");

                    b.Property<int>("Toyid")
                        .HasColumnType("integer");

                    b.Property<DateTime>("creaDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("id");

                    b.HasIndex("ToyId");

                    b.HasIndex("Toyid");

                    b.ToTable("Task", "content");
                });

            modelBuilder.Entity("Codino_UserCredential.Repository.Models.Content.TaskSubmission", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("CreaUserId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ProgrammingTaskid")
                        .HasColumnType("integer");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<string>("SubmittedCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TaskId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("Userid")
                        .HasColumnType("integer");

                    b.Property<DateTime>("creaDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("id");

                    b.HasIndex("ProgrammingTaskid");

                    b.HasIndex("TaskId");

                    b.HasIndex("UserId");

                    b.HasIndex("Userid");

                    b.ToTable("TaskSubmission", "content");
                });

            modelBuilder.Entity("Codino_UserCredential.Repository.Models.Content.Toy", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("BiomeId")
                        .HasColumnType("integer");

                    b.Property<int>("Biomeid")
                        .HasColumnType("integer");

                    b.Property<int>("CreaUserId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("IconImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("ModifDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("creaDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("id");

                    b.HasIndex("BiomeId");

                    b.HasIndex("Biomeid");

                    b.ToTable("Toy", "content");
                });

            modelBuilder.Entity("Codino_UserCredential.Repository.Models.Content.WorldMap", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("BackgroundImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("CreaUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("creaDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("id");

                    b.ToTable("WorldMap", "content");
                });

            modelBuilder.Entity("Codino_UserCredential.Repository.Repositories.User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<bool>("AllowEmail")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowKvkk")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowSms")
                        .HasColumnType("boolean");

                    b.Property<string>("AvatarImage")
                        .HasColumnType("text");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CellPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("CreaUserId")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("EmailVerified")
                        .HasColumnType("boolean");

                    b.Property<string>("LastPassword")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastPasswordChangeDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("TCKN")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)");

                    b.Property<int>("UserStatusId")
                        .HasColumnType("integer");

                    b.Property<int>("UserTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("creaDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("hasRoboticModels")
                        .HasColumnType("boolean");

                    b.HasKey("id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("User", "user");
                });

            modelBuilder.Entity("UserLoginRequest", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<string>("Cellphone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("CreaDate")
                        .HasColumnType("integer");

                    b.Property<int>("CreaUserId")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("LoginStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Otp")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("creaDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("id");

                    b.ToTable("UserLoginRequest", "user");
                });

            modelBuilder.Entity("Codino_UserCredential.Repository.Models.Content.Biome", b =>
                {
                    b.HasOne("Codino_UserCredential.Repository.Models.Content.WorldMap", "WorldMapNavigation")
                        .WithMany()
                        .HasForeignKey("WorldMapId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("WorldMapNavigation");
                });

            modelBuilder.Entity("Codino_UserCredential.Repository.Models.Content.ProgrammingTask", b =>
                {
                    b.HasOne("Codino_UserCredential.Repository.Models.Content.Toy", null)
                        .WithMany()
                        .HasForeignKey("ToyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Codino_UserCredential.Repository.Models.Content.Toy", "Toy")
                        .WithMany()
                        .HasForeignKey("Toyid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Toy");
                });

            modelBuilder.Entity("Codino_UserCredential.Repository.Models.Content.TaskSubmission", b =>
                {
                    b.HasOne("Codino_UserCredential.Repository.Models.Content.ProgrammingTask", "ProgrammingTask")
                        .WithMany()
                        .HasForeignKey("ProgrammingTaskid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Codino_UserCredential.Repository.Models.Content.ProgrammingTask", null)
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Codino_UserCredential.Repository.Repositories.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Codino_UserCredential.Repository.Repositories.User", "User")
                        .WithMany()
                        .HasForeignKey("Userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProgrammingTask");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Codino_UserCredential.Repository.Models.Content.Toy", b =>
                {
                    b.HasOne("Codino_UserCredential.Repository.Models.Content.Biome", null)
                        .WithMany()
                        .HasForeignKey("BiomeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Codino_UserCredential.Repository.Models.Content.Biome", "Biome")
                        .WithMany()
                        .HasForeignKey("Biomeid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Biome");
                });
#pragma warning restore 612, 618
        }
    }
}
